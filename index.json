[{"content":"What are Delegates? In Unreal Engine, Delegates provide a callback mechanism that allows one piece of code to notify other parts of the program when something happens. They enable an event-driven programming style by separating the event sender from the event receiver\u0026ndash;meaning the object triggering the event doesn\u0026rsquo;t need to know who is listening, only that it can broadcast the event when needed. This makes code more modular and maitainable.\nTypes of Delegates Unreal Engine provides four main kinds of delegates, each with its own use case:\nSimple – Holds one bound function. Multicast – Can call multiple bound functions. Dynamic – Single delegate that supports reflection and Blueprint binding. Dynamic Multicast – Multicast delegate with reflection and Blueprint binding. Simple Delegate A simple delegate can be declared using the DECLARE_DELEAGE(DelegateName) macro. The code below shows the declaration of a simple delegate:\nDECLARE_DELEGATE(FOnMyEventOccured); After declaring the delegate type, we can create instances of it:\nFOnMyEventOccured OnMyEventOccured; Now, we can bind our delegate to different types of receivers and execute it. Let\u0026rsquo;s bind and execute our delegate:\nDECLARE_DELEGATE(FOnMyEventOccured); void ReceiverFunction() { UE_LOG(LogTemp, Warning, TEXT(\u0026#34;ReceiverFunction called\u0026#34;)); } void TestDelegate() { FOnMyEventOccured OnMyEventOccured; OnMyEventOccured.BindStatic(\u0026amp;ReceiverFunction); if (OnMyEventOccured.IsBound()) { OnMyEventOccured.Execute(); } } ","permalink":"https://ali-askari-dev.github.io/posts/post1/","summary":"Understand the different types of delegates in Unreal Engine and when to use each one","title":"Mastering Delegates in Unreal Engine"}]